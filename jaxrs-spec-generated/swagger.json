{
  "swagger" : "2.0",
  "info" : {
    "description" : "REST API for Metaform",
    "version" : "0.0.1",
    "title" : "Metaform REST API"
  },
  "basePath" : "/",
  "schemes" : [ "https" ],
  "consumes" : [ "application/json;charset=utf-8" ],
  "produces" : [ "application/json;charset=utf-8" ],
  "security" : [ {
    "bearer" : [ ]
  } ],
  "paths" : {
    "/realms/{realmId}/metaforms" : {
      "get" : {
        "tags" : [ "Metaforms" ],
        "summary" : "Lists Metaforms",
        "description" : "Lists Metaforms from the realm. User receives only metaforms where he/she has permission to.",
        "operationId" : "listMetaforms",
        "parameters" : [ {
          "name" : "realmId",
          "in" : "path",
          "description" : "realm id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of metaforms",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Metaform"
              }
            }
          },
          "400" : {
            "description" : "Invalid request was sent to the server",
            "schema" : {
              "$ref" : "#/definitions/BadRequest"
            }
          },
          "403" : {
            "description" : "Attempted to make a call with unauthorized client",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/InternalServerError"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Metaforms" ],
        "summary" : "create new Metaform",
        "description" : "Creates new Metaform",
        "operationId" : "createMetaform",
        "parameters" : [ {
          "name" : "realmId",
          "in" : "path",
          "description" : "realm id",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "payload",
          "description" : "Payload",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Metaform"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Created Metaform",
            "schema" : {
              "$ref" : "#/definitions/Metaform"
            }
          },
          "400" : {
            "description" : "Invalid request was sent to the server",
            "schema" : {
              "$ref" : "#/definitions/BadRequest"
            }
          },
          "403" : {
            "description" : "Attempted to make a call with unauthorized client",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Attempted to make a call to an non existant metaform",
            "schema" : {
              "$ref" : "#/definitions/NotFound"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/realms/{realmId}/metaforms/{metaformId}" : {
      "get" : {
        "tags" : [ "Metaforms" ],
        "summary" : "Finds single Metaform",
        "description" : "Finds a single Metaform",
        "operationId" : "findMetaform",
        "parameters" : [ {
          "name" : "realmId",
          "in" : "path",
          "description" : "realm id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "metaformId",
          "in" : "path",
          "description" : "Metaform id",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "A metaform",
            "schema" : {
              "$ref" : "#/definitions/Metaform"
            }
          },
          "400" : {
            "description" : "Invalid request was sent to the server",
            "schema" : {
              "$ref" : "#/definitions/BadRequest"
            }
          },
          "403" : {
            "description" : "Attempted to make a call with unauthorized client",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Attempted to make a call to an non existant metaform",
            "schema" : {
              "$ref" : "#/definitions/NotFound"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/InternalServerError"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Metaforms" ],
        "summary" : "Updates Metaform",
        "description" : "Updates a Metaform",
        "operationId" : "updateMetaform",
        "parameters" : [ {
          "name" : "realmId",
          "in" : "path",
          "description" : "realm id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "metaformId",
          "in" : "path",
          "description" : "Metaform id",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "payload",
          "description" : "Payload",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Metaform"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Updated Metaform",
            "schema" : {
              "$ref" : "#/definitions/Metaform"
            }
          },
          "400" : {
            "description" : "Invalid request was sent to the server",
            "schema" : {
              "$ref" : "#/definitions/BadRequest"
            }
          },
          "403" : {
            "description" : "Attempted to make a call with unauthorized client",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Attempted to make a call to an non existant metaform",
            "schema" : {
              "$ref" : "#/definitions/NotFound"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/InternalServerError"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Metaforms" ],
        "summary" : "Deletes Metaform",
        "description" : "Deletes a Metaform",
        "operationId" : "deleteMetaform",
        "parameters" : [ {
          "name" : "realmId",
          "in" : "path",
          "description" : "realm id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "metaformId",
          "in" : "path",
          "description" : "Metaform id",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty content indicating a successful removal"
          },
          "400" : {
            "description" : "Invalid request was sent to the server",
            "schema" : {
              "$ref" : "#/definitions/BadRequest"
            }
          },
          "403" : {
            "description" : "Attempted to make a call with unauthorized client",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Attempted to make a call to an non existant metaform",
            "schema" : {
              "$ref" : "#/definitions/NotFound"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/realms/{realmId}/metaforms/{metaformId}/replies" : {
      "get" : {
        "tags" : [ "Replies" ],
        "summary" : "Lists form replies",
        "description" : "Lists form replies",
        "operationId" : "listReplies",
        "parameters" : [ {
          "name" : "realmId",
          "in" : "path",
          "description" : "realm id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "metaformId",
          "in" : "path",
          "description" : "Metaform id",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "userId",
          "in" : "query",
          "description" : "Filter results by user id. If this parameter is not specified all replies are returned, this requires logged user to have proper permission to do so",
          "required" : false,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "createdBefore",
          "in" : "query",
          "description" : "Filter results created before specified time",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "createdAfter",
          "in" : "query",
          "description" : "Filter results created after specified time",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "modifiedBefore",
          "in" : "query",
          "description" : "Filter results modified before specified time",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "modifiedAfter",
          "in" : "query",
          "description" : "Filter results modified after specified time",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "includeRevisions",
          "in" : "query",
          "description" : "Specifies that revisions should be included into response",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Filter results by field values. Format is field:value, multiple values can be added by using comma separator. E.g. field1=value,field2=another",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "csv"
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of replies",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Reply"
              }
            }
          },
          "400" : {
            "description" : "Invalid request was sent to the server",
            "schema" : {
              "$ref" : "#/definitions/BadRequest"
            }
          },
          "403" : {
            "description" : "Attempted to make a call with unauthorized client",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Attempted to make a call to an non existant metaform",
            "schema" : {
              "$ref" : "#/definitions/NotFound"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/InternalServerError"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Replies" ],
        "summary" : "create new form reply",
        "description" : "Creates new form reply",
        "operationId" : "createReply",
        "parameters" : [ {
          "name" : "realmId",
          "in" : "path",
          "description" : "realm id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "metaformId",
          "in" : "path",
          "description" : "Metaform id",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "updateExisting",
          "in" : "query",
          "description" : "specifies that existing reply should be updated",
          "required" : false,
          "type" : "boolean"
        }, {
          "in" : "body",
          "name" : "payload",
          "description" : "Payload",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Reply"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Created reply",
            "schema" : {
              "$ref" : "#/definitions/Reply"
            }
          },
          "400" : {
            "description" : "Invalid request was sent to the server",
            "schema" : {
              "$ref" : "#/definitions/BadRequest"
            }
          },
          "403" : {
            "description" : "Attempted to make a call with unauthorized client",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Attempted to make a call to an non existant metaform",
            "schema" : {
              "$ref" : "#/definitions/NotFound"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/realms/{realmId}/metaforms/{metaformId}/export" : {
      "get" : {
        "tags" : [ "Replies" ],
        "summary" : "Exports metaform data",
        "description" : "Exports metaform data",
        "operationId" : "export",
        "parameters" : [ {
          "name" : "realmId",
          "in" : "path",
          "description" : "realm id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "metaformId",
          "in" : "path",
          "description" : "Metaform id",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "format",
          "in" : "query",
          "description" : "Export results in specified format (XLSX)",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Exported Metaform",
            "schema" : {
              "type" : "string",
              "format" : "binary"
            }
          },
          "400" : {
            "description" : "Invalid request was sent to the server",
            "schema" : {
              "$ref" : "#/definitions/BadRequest"
            }
          },
          "403" : {
            "description" : "Attempted to make a call with unauthorized client",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Attempted to make a call to an non existant metaform",
            "schema" : {
              "$ref" : "#/definitions/NotFound"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/realms/{realmId}/metaforms/{metaformId}/replies/{replyId}" : {
      "get" : {
        "tags" : [ "Replies" ],
        "summary" : "Find a single reply",
        "description" : "Finds single reply by id",
        "operationId" : "findReply",
        "parameters" : [ {
          "name" : "realmId",
          "in" : "path",
          "description" : "realm id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "metaformId",
          "in" : "path",
          "description" : "Metaform id",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "replyId",
          "in" : "path",
          "description" : "Reply id",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "A reply",
            "schema" : {
              "$ref" : "#/definitions/Reply"
            }
          },
          "400" : {
            "description" : "Invalid request was sent to the server",
            "schema" : {
              "$ref" : "#/definitions/BadRequest"
            }
          },
          "403" : {
            "description" : "Attempted to make a call with unauthorized client",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Attempted to make a call to an non existant metaform",
            "schema" : {
              "$ref" : "#/definitions/NotFound"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/InternalServerError"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Replies" ],
        "summary" : "Updates reply",
        "description" : "Updates reply",
        "operationId" : "updateReply",
        "parameters" : [ {
          "name" : "realmId",
          "in" : "path",
          "description" : "realm id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "metaformId",
          "in" : "path",
          "description" : "Metaform id",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "replyId",
          "in" : "path",
          "description" : "Reply id",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "in" : "body",
          "name" : "payload",
          "description" : "Payload",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Reply"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty response indicating a succesful update"
          },
          "400" : {
            "description" : "Invalid request was sent to the server",
            "schema" : {
              "$ref" : "#/definitions/BadRequest"
            }
          },
          "403" : {
            "description" : "Attempted to make a call with unauthorized client",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Attempted to make a call to an non existant metaform",
            "schema" : {
              "$ref" : "#/definitions/NotFound"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/InternalServerError"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Replies" ],
        "summary" : "Deletes a reply",
        "description" : "Deletes a reply",
        "operationId" : "deleteReply",
        "parameters" : [ {
          "name" : "realmId",
          "in" : "path",
          "description" : "realm id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "metaformId",
          "in" : "path",
          "description" : "Metaform id",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "replyId",
          "in" : "path",
          "description" : "Reply id",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty content indicating a successful removal"
          },
          "400" : {
            "description" : "Invalid request was sent to the server",
            "schema" : {
              "$ref" : "#/definitions/BadRequest"
            }
          },
          "403" : {
            "description" : "Attempted to make a call with unauthorized client",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Attempted to make a call to an non existant metaform",
            "schema" : {
              "$ref" : "#/definitions/NotFound"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/InternalServerError"
            }
          }
        }
      }
    }
  },
  "securityDefinitions" : {
    "bearer" : {
      "type" : "apiKey",
      "name" : "Authorization",
      "in" : "header"
    }
  },
  "definitions" : {
    "Reply" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "userId" : {
          "type" : "string",
          "format" : "uuid"
        },
        "revision" : {
          "type" : "string",
          "format" : "date-time"
        },
        "data" : {
          "$ref" : "#/definitions/ReplyData"
        }
      }
    },
    "ReplyData" : {
      "type" : "object",
      "additionalProperties" : {
        "type" : "object",
        "properties" : { }
      }
    },
    "Metaform" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "replyStrategy" : {
          "type" : "string",
          "enum" : [ "PUBLIC", "PRIVATE" ]
        },
        "allowAnonymous" : {
          "type" : "boolean",
          "description" : "Are anonymous replies allowed or not"
        },
        "title" : {
          "type" : "string"
        },
        "sections" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MetaformSection"
          }
        }
      }
    },
    "MetaformSection" : {
      "type" : "object",
      "properties" : {
        "title" : {
          "type" : "string"
        },
        "visible-if" : {
          "$ref" : "#/definitions/MetaformVisibleIf"
        },
        "fields" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MetaformField"
          }
        }
      }
    },
    "Metafield" : {
      "type" : "object",
      "required" : [ "name", "type" ],
      "properties" : {
        "title" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string",
          "description" : "Field name"
        },
        "type" : {
          "$ref" : "#/definitions/MetaformFieldType"
        },
        "time" : {
          "type" : "boolean"
        },
        "contexts" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "MetaformField" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "visible-if" : {
          "$ref" : "#/definitions/MetaformVisibleIf"
        },
        "name" : {
          "type" : "string",
          "description" : "Field name"
        },
        "type" : {
          "$ref" : "#/definitions/MetaformFieldType"
        },
        "title" : {
          "type" : "string"
        },
        "required" : {
          "type" : "boolean"
        },
        "contexts" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "flags" : {
          "$ref" : "#/definitions/MetaformFieldFlags"
        },
        "placeholder" : {
          "type" : "string"
        },
        "class" : {
          "type" : "string"
        },
        "readonly" : {
          "type" : "boolean"
        },
        "help" : {
          "type" : "string"
        },
        "default" : {
          "type" : "string",
          "description" : "a default value for a field"
        },
        "min" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Minimum value for a field. Only for number fields"
        },
        "max" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Maximum value for a field. Only for number fields"
        },
        "step" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Value step for a field. Only for number fields"
        },
        "checked" : {
          "type" : "boolean",
          "description" : "Whether checkbox should be checked by default. Only for checkbox fields"
        },
        "printable" : {
          "type" : "boolean",
          "description" : "Defines whether field is printable or not. Only for table fields"
        },
        "options" : {
          "type" : "array",
          "description" : "Options for radio, checklist, select fields",
          "items" : {
            "$ref" : "#/definitions/MetaformFieldOption"
          }
        },
        "source-url" : {
          "type" : "string",
          "format" : "url",
          "description" : "Source url for autocomplete and autocomplete-multiple fields"
        },
        "upload-url" : {
          "type" : "string",
          "format" : "url",
          "description" : "Upload url for files field."
        },
        "single-file" : {
          "type" : "boolean",
          "description" : "Defines whether file fields allow multiple files or just one"
        },
        "only-images" : {
          "type" : "boolean",
          "description" : "Defines whether file fields allow only images"
        },
        "max-file-size" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Maximum upload size for image filds"
        },
        "draggable" : {
          "type" : "boolean",
          "description" : "Defines whether table rows should be draggable."
        },
        "columns" : {
          "type" : "array",
          "description" : "Columns for table fields",
          "items" : {
            "$ref" : "#/definitions/MetaformTableColumn"
          }
        },
        "src" : {
          "type" : "string",
          "format" : "url",
          "description" : "Url for logo field."
        },
        "text" : {
          "type" : "string",
          "description" : "Text for small field."
        },
        "html" : {
          "type" : "string",
          "description" : "Html code for html field."
        }
      }
    },
    "MetaformFieldFlags" : {
      "type" : "object",
      "properties" : {
        "managementEditable" : {
          "type" : "boolean",
          "description" : "Field should be editable in management service",
          "default" : false
        }
      }
    },
    "MetaformFieldType" : {
      "type" : "string",
      "enum" : [ "text", "hidden", "email", "number", "memo", "boolean", "radio", "checklist", "date", "time", "date-time", "files", "table", "logo", "small-text", "html", "submit", "select", "autocomplete", "autocomplete-multiple" ]
    },
    "MetaformTableColumn" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "$ref" : "#/definitions/MetaformTableColumnType"
        },
        "title" : {
          "type" : "string",
          "description" : "Column title"
        },
        "calculate-sum" : {
          "type" : "boolean",
          "description" : "Defines column should automatically calculate sum"
        },
        "sum-postfix" : {
          "type" : "string",
          "description" : "Postfix for calculated sum"
        },
        "column-width" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Defines column width"
        },
        "placeholder" : {
          "type" : "string",
          "description" : "Placeholder for column field"
        },
        "readonly" : {
          "type" : "boolean",
          "description" : "Defines column as readonly"
        },
        "required" : {
          "type" : "boolean",
          "description" : "Defines column as requires"
        },
        "source-url" : {
          "type" : "string",
          "format" : "url",
          "description" : "Defines source url for autocomplete columns"
        },
        "html" : {
          "type" : "string",
          "description" : "Html code for html columns"
        },
        "action" : {
          "type" : "string",
          "description" : "Action for button columns"
        },
        "values" : {
          "type" : "object",
          "description" : "Values for enum columns",
          "properties" : {
            "value" : {
              "type" : "string"
            },
            "other" : {
              "type" : "string"
            },
            "text" : {
              "type" : "string"
            }
          }
        }
      }
    },
    "MetaformTableColumnType" : {
      "type" : "string",
      "enum" : [ "hidden", "text", "autocomplete", "number", "enum", "date", "time", "html", "button" ]
    },
    "MetaformFieldOption" : {
      "type" : "object",
      "required" : [ "name", "text" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Option name"
        },
        "text" : {
          "type" : "string",
          "description" : "Option text"
        },
        "checked" : {
          "type" : "boolean",
          "description" : "Defines whether option should be checked by default."
        },
        "selected" : {
          "type" : "boolean",
          "description" : "Defines whether option should be selected by default."
        }
      },
      "description" : "Option object for Metaform field"
    },
    "MetaformVisibleIf" : {
      "type" : "object",
      "properties" : {
        "field" : {
          "type" : "string",
          "description" : "Field where the visible if rule is relative to"
        },
        "equals" : {
          "type" : "string",
          "description" : "Value must be equal to this value. If value is specified \"true\" field must have any value selected"
        },
        "not-equals" : {
          "type" : "string",
          "description" : "Value must be not equal to this value."
        },
        "and" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MetaformVisibleIf"
          }
        },
        "or" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MetaformVisibleIf"
          }
        }
      },
      "description" : "Rule that defines whether specified object is visible"
    },
    "InternalServerError" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "integer",
          "format" : "int32"
        },
        "message" : {
          "type" : "string"
        }
      }
    },
    "Forbidden" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "integer",
          "format" : "int32"
        },
        "message" : {
          "type" : "string"
        }
      }
    },
    "BadRequest" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "integer",
          "format" : "int32"
        },
        "message" : {
          "type" : "string"
        }
      }
    },
    "NotImplemented" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "integer",
          "format" : "int32"
        },
        "message" : {
          "type" : "string"
        }
      }
    },
    "NotFound" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "integer",
          "format" : "int32"
        },
        "message" : {
          "type" : "string"
        }
      }
    }
  }
}