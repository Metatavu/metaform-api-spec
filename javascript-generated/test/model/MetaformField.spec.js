/**
 * Metaform REST API
 * REST API for Metaform
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MetaformApiClient);
  }
}(this, function(expect, MetaformApiClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MetaformApiClient.MetaformField();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MetaformField', function() {
    it('should create an instance of MetaformField', function() {
      // uncomment below and update the code to test MetaformField
      //var instane = new MetaformApiClient.MetaformField();
      //expect(instance).to.be.a(MetaformApiClient.MetaformField);
    });

    it('should have the property visibleIf (base name: "visible-if")', function() {
      // uncomment below and update the code to test the property visibleIf
      //var instane = new MetaformApiClient.MetaformField();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new MetaformApiClient.MetaformField();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instane = new MetaformApiClient.MetaformField();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instane = new MetaformApiClient.MetaformField();
      //expect(instance).to.be();
    });

    it('should have the property required (base name: "required")', function() {
      // uncomment below and update the code to test the property required
      //var instane = new MetaformApiClient.MetaformField();
      //expect(instance).to.be();
    });

    it('should have the property contexts (base name: "contexts")', function() {
      // uncomment below and update the code to test the property contexts
      //var instane = new MetaformApiClient.MetaformField();
      //expect(instance).to.be();
    });

    it('should have the property placeholder (base name: "placeholder")', function() {
      // uncomment below and update the code to test the property placeholder
      //var instane = new MetaformApiClient.MetaformField();
      //expect(instance).to.be();
    });

    it('should have the property _class (base name: "class")', function() {
      // uncomment below and update the code to test the property _class
      //var instane = new MetaformApiClient.MetaformField();
      //expect(instance).to.be();
    });

    it('should have the property readonly (base name: "readonly")', function() {
      // uncomment below and update the code to test the property readonly
      //var instane = new MetaformApiClient.MetaformField();
      //expect(instance).to.be();
    });

    it('should have the property help (base name: "help")', function() {
      // uncomment below and update the code to test the property help
      //var instane = new MetaformApiClient.MetaformField();
      //expect(instance).to.be();
    });

    it('should have the property _default (base name: "default")', function() {
      // uncomment below and update the code to test the property _default
      //var instane = new MetaformApiClient.MetaformField();
      //expect(instance).to.be();
    });

    it('should have the property min (base name: "min")', function() {
      // uncomment below and update the code to test the property min
      //var instane = new MetaformApiClient.MetaformField();
      //expect(instance).to.be();
    });

    it('should have the property max (base name: "max")', function() {
      // uncomment below and update the code to test the property max
      //var instane = new MetaformApiClient.MetaformField();
      //expect(instance).to.be();
    });

    it('should have the property step (base name: "step")', function() {
      // uncomment below and update the code to test the property step
      //var instane = new MetaformApiClient.MetaformField();
      //expect(instance).to.be();
    });

    it('should have the property checked (base name: "checked")', function() {
      // uncomment below and update the code to test the property checked
      //var instane = new MetaformApiClient.MetaformField();
      //expect(instance).to.be();
    });

    it('should have the property printable (base name: "printable")', function() {
      // uncomment below and update the code to test the property printable
      //var instane = new MetaformApiClient.MetaformField();
      //expect(instance).to.be();
    });

    it('should have the property options (base name: "options")', function() {
      // uncomment below and update the code to test the property options
      //var instane = new MetaformApiClient.MetaformField();
      //expect(instance).to.be();
    });

    it('should have the property sourceUrl (base name: "source-url")', function() {
      // uncomment below and update the code to test the property sourceUrl
      //var instane = new MetaformApiClient.MetaformField();
      //expect(instance).to.be();
    });

    it('should have the property uploadUrl (base name: "upload-url")', function() {
      // uncomment below and update the code to test the property uploadUrl
      //var instane = new MetaformApiClient.MetaformField();
      //expect(instance).to.be();
    });

    it('should have the property singleFile (base name: "single-file")', function() {
      // uncomment below and update the code to test the property singleFile
      //var instane = new MetaformApiClient.MetaformField();
      //expect(instance).to.be();
    });

    it('should have the property onlyImages (base name: "only-images")', function() {
      // uncomment below and update the code to test the property onlyImages
      //var instane = new MetaformApiClient.MetaformField();
      //expect(instance).to.be();
    });

    it('should have the property maxFileSize (base name: "max-file-size")', function() {
      // uncomment below and update the code to test the property maxFileSize
      //var instane = new MetaformApiClient.MetaformField();
      //expect(instance).to.be();
    });

    it('should have the property draggable (base name: "draggable")', function() {
      // uncomment below and update the code to test the property draggable
      //var instane = new MetaformApiClient.MetaformField();
      //expect(instance).to.be();
    });

    it('should have the property columns (base name: "columns")', function() {
      // uncomment below and update the code to test the property columns
      //var instane = new MetaformApiClient.MetaformField();
      //expect(instance).to.be();
    });

    it('should have the property src (base name: "src")', function() {
      // uncomment below and update the code to test the property src
      //var instane = new MetaformApiClient.MetaformField();
      //expect(instance).to.be();
    });

    it('should have the property text (base name: "text")', function() {
      // uncomment below and update the code to test the property text
      //var instane = new MetaformApiClient.MetaformField();
      //expect(instance).to.be();
    });

    it('should have the property html (base name: "html")', function() {
      // uncomment below and update the code to test the property html
      //var instane = new MetaformApiClient.MetaformField();
      //expect(instance).to.be();
    });

  });

}));
